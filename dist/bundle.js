/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,o,i,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,r=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!((o=(o=c.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=t.call(e,c)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),c=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)c.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return c}function i(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e}function c(e){return this instanceof c?(this.v=e,this):new c(e)}function u(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=o[e](t)).value instanceof c?Promise.resolve(n.value.v).then(a,l):f(i[0][2],n)}catch(e){f(i[0][3],e)}var n}function a(e){s("next",e)}function l(e){s("throw",e)}function f(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function s(e){return"function"==typeof e}function a(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create;var l=a((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function f(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}return e.prototype.unsubscribe=function(){var e,t,n,c,u;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var f=r(a),d=f.next();!d.done;d=f.next())d.value.remove(this)}catch(t){e={error:t}}finally{try{d&&!d.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}else a.remove(this);var h=this.initialTeardown;if(s(h))try{h()}catch(e){u=e instanceof l?e.errors:[e]}var p=this._teardowns;if(p){this._teardowns=null;try{for(var b=r(p),y=b.next();!y.done;y=b.next()){var m=y.value;try{v(m)}catch(e){u=null!=u?u:[],e instanceof l?u=i(i([],o(u)),o(e.errors)):u.push(e)}}}catch(e){n={error:e}}finally{try{y&&!y.done&&(c=b.return)&&c.call(b)}finally{if(n)throw n.error}}}if(u)throw new l(u)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&f(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),h=d.EMPTY;function p(e){return e instanceof d||e&&"closed"in e&&s(e.remove)&&s(e.add)&&s(e.unsubscribe)}function v(e){s(e)?e():e.unsubscribe()}var b=null,y=null,m=void 0,w=!1,g=!1,_={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=_.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,i([],o(e)))},clearTimeout:function(e){var t=_.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function E(e){_.setTimeout((function(){if(!b)throw e;b(e)}))}function x(){}var S=C("C",void 0,void 0);function C(e,t,n){return{kind:e,value:t,error:n}}var I=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=N,n}return t(n,e),n.create=function(e,t,n){return new k(e,t,n)},n.prototype.next=function(e){this.isStopped?A(function(e){return C("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?A(C("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?A(S,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(d),k=function(e){function n(t,n,r){var o,i=e.call(this)||this;if(s(t))o=t;else if(t){var c;o=t.next,n=t.error,r=t.complete,i&&g?(c=Object.create(t)).unsubscribe=function(){return i.unsubscribe()}:c=t,o=null==o?void 0:o.bind(c),n=null==n?void 0:n.bind(c),r=null==r?void 0:r.bind(c)}return i.destination={next:o?T(o,i):x,error:T(null!=n?n:j,i),complete:r?T(r,i):x},i}return t(n,e),n}(I);function T(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{e.apply(void 0,i([],o(n)))}catch(e){if(w){if(!t._syncErrorHack_isSubscribing)throw e;t.__syncError=e}else E(e)}}}function j(e){throw e}function A(e,t){var n=y;n&&_.setTimeout((function(){return n(e,t)}))}var N={closed:!0,next:x,error:j,complete:x},P="function"==typeof Symbol&&Symbol.observable||"@@observable";function L(e){return e}function O(e){return 0===e.length?L:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var H=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=(r=e)&&r instanceof I||function(e){return e&&s(e.next)&&s(e.error)&&s(e.complete)}(r)&&p(r)?e:new k(e,t,n);if(w)this._deprecatedSyncErrorSubscribe(o);else{var i=this.operator,c=this.source;o.add(i?i.call(o,c):c?this._subscribe(o):this._trySubscribe(o))}return o},e.prototype._deprecatedSyncErrorSubscribe=function(e){var t=e;t._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)e.add(n.call(e,this.source));else try{e.add(this._subscribe(e))}catch(e){t.__syncError=e}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{e.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=M(t))((function(t,r){var o;o=n.subscribe((function(t){try{e(t)}catch(e){r(e),null==o||o.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[P]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?O(e)(this):this},e.prototype.toPromise=function(e){var t=this;return new(e=M(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function M(e){var t;return null!==(t=null!=e?e:m)&&void 0!==t?t:Promise}function $(e){return function(t){if(function(e){return s(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var z=function(e){function n(t,n,r,o,i){var c=e.call(this,t)||this;return c.onFinalize=i,c._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(n,e),n.prototype.unsubscribe=function(){var t,n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},n}(I);function D(e,t){return $((function(n,r){var o=0;n.subscribe(new z(r,(function(n){r.next(e.call(t,n,o++))})))}))}var q=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function F(e){return s(null==e?void 0:e.then)}function K(e,t){return new H((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}var R="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Y(e,t){if(!e)throw new Error("Iterable cannot be null");return new H((function(n){var r=new d;return r.add(t.schedule((function(){var o=e[Symbol.asyncIterator]();r.add(t.schedule((function(){var e=this;o.next().then((function(t){t.done?n.complete():(n.next(t.value),e.schedule())}))})))}))),r}))}function B(e){return s(e[P])}function U(e){return s(null==e?void 0:e[R])}function G(e){return Symbol.asyncIterator&&s(null==e?void 0:e[Symbol.asyncIterator])}function Z(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function J(e){return u(this,arguments,(function(){var t,r,o;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,c(t.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,c(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,c(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function Q(e){return s(null==e?void 0:e.getReader)}function V(e,t){return t?function(e,t){if(null!=e){if(B(e))return function(e,t){return new H((function(n){var r=new d;return r.add(t.schedule((function(){var o=e[P]();r.add(o.subscribe({next:function(e){r.add(t.schedule((function(){return n.next(e)})))},error:function(e){r.add(t.schedule((function(){return n.error(e)})))},complete:function(){r.add(t.schedule((function(){return n.complete()})))}}))}))),r}))}(e,t);if(q(e))return K(e,t);if(F(e))return function(e,t){return new H((function(n){return t.schedule((function(){return e.then((function(e){n.add(t.schedule((function(){n.next(e),n.add(t.schedule((function(){return n.complete()})))})))}),(function(e){n.add(t.schedule((function(){return n.error(e)})))}))}))}))}(e,t);if(G(e))return Y(e,t);if(U(e))return function(e,t){return new H((function(n){var r;return n.add(t.schedule((function(){r=e[R](),function(e,t,n,r){void 0===r&&(r=0);var o=t.schedule((function(){try{n.call(this)}catch(t){e.error(t)}}),r);e.add(o)}(n,t,(function(){var e=r.next(),t=e.value;e.done?n.complete():(n.next(t),this.schedule())}))}))),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(Q(e))return function(e,t){return Y(J(e),t)}(e,t)}throw Z(e)}(e,t):W(e)}function W(e){if(e instanceof H)return e;if(null!=e){if(B(e))return o=e,new H((function(e){var t=o[P]();if(s(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(q(e))return X(e);if(F(e))return n=e,new H((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,E)}));if(G(e))return ee(e);if(U(e))return t=e,new H((function(e){var n,o;try{for(var i=r(t),c=i.next();!c.done;c=i.next()){var u=c.value;if(e.next(u),e.closed)return}}catch(e){n={error:e}}finally{try{c&&!c.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(Q(e))return ee(J(e))}var t,n,o;throw Z(e)}function X(e){return new H((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function ee(e){return new H((function(t){(function(e,t){var o,i,c,u,s,a,l,f;return s=this,a=void 0,f=function(){var s,a;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(s=i.value,t.next(s),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=n.sent(),c={error:a},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(c)throw c.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{o(f.next(e))}catch(e){t(e)}}function r(e){try{o(f.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}o((f=f.apply(s,a||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function te(e,t,n){return void 0===n&&(n=1/0),s(t)?te((function(n,r){return D((function(e,o){return t(n,e,r,o)}))(W(e(n,r)))}),n):("number"==typeof t&&(n=t),$((function(t,r){return function(e,t,n,r,o,i,c,u){var s=[],a=0,l=0,f=!1,d=function(){!f||s.length||a||t.complete()},h=function(e){return a<r?p(e):s.push(e)},p=function(e){a++;var o=!1;W(n(e,l++)).subscribe(new z(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;s.length&&a<r;)e=void 0,e=s.shift(),p(e);d()}catch(e){t.error(e)}var e})))};return e.subscribe(new z(t,h,(function(){f=!0,d()}))),function(){}}(t,r,e,n)})))}var ne=Array.isArray;var re=["addListener","removeListener"],oe=["addEventListener","removeEventListener"],ie=["on","off"];function ce(e,t,n,r){if(s(n)&&(r=n,n=void 0),r)return ce(e,t,n).pipe((c=r,D((function(e){return function(e,t){return ne(t)?e.apply(void 0,i([],o(t))):e(t)}(c,e)}))));var c,u=o(function(e){return s(e.addEventListener)&&s(e.removeEventListener)}(e)?oe.map((function(r){return function(o){return e[r](t,o,n)}})):function(e){return s(e.addListener)&&s(e.removeListener)}(e)?re.map(ue(e,t)):function(e){return s(e.on)&&s(e.off)}(e)?ie.map(ue(e,t)):[],2),a=u[0],l=u[1];if(!a&&q(e))return te((function(e){return ce(e,t,n)}))(X(e));if(!a)throw new TypeError("Invalid event target");return new H((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return a(t),function(){return l(t)}}))}function ue(e,t){return function(n){return function(r){return e[n](t,r)}}}var se=a((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ae=function(e){function n(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return t(n,e),n.prototype.lift=function(e){var t=new le(this,this);return t.operator=e,t},n.prototype._throwIfClosed=function(){if(this.closed)throw new se},n.prototype.next=function(e){var t,n;if(this._throwIfClosed(),!this.isStopped){var o=this.observers.slice();try{for(var i=r(o),c=i.next();!c.done;c=i.next())c.value.next(e)}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}},n.prototype.error=function(e){if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=e;for(var t=this.observers;t.length;)t.shift().error(e)}},n.prototype.complete=function(){if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;for(var e=this.observers;e.length;)e.shift().complete()}},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},n.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},n.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,r=t.isStopped,o=t.observers;return n||r?h:(o.push(e),new d((function(){return f(o,e)})))},n.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},n.prototype.asObservable=function(){var e=new H;return e.source=this,e},n.create=function(e,t){return new le(e,t)},n}(H),le=function(e){function n(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return t(n,e),n.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},n.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},n.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},n.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:h},n}(ae);let fe;var de=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(d),he={setInterval:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=he.delegate;return((null==n?void 0:n.setInterval)||setInterval).apply(void 0,i([],o(e)))},clearInterval:function(e){var t=he.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},pe=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),he.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;he.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=!!e&&e||new Error(e)}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,f(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(de),ve={now:function(){return(ve.delegate||Date).now()},delegate:void 0},be=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=ve.now,e}(),ye=new(function(e){function n(t,n){void 0===n&&(n=be.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(be))(pe),me=ye;function we(e,t){return void 0===e&&(e=0),void 0===t&&(t=ye),e<0&&(e=0),function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=me);var r,o=-1;return null!=t&&((r=t)&&s(r.schedule)?n=t:o=t),new H((function(t){var r=function(e){return e instanceof Date&&!isNaN(e)}(e)?+e-n.now():e;r<0&&(r=0);var i=0;return n.schedule((function(){t.closed||(t.next(i++),0<=o?this.schedule(void 0,o):t.complete())}),r)}))}(e,e,t)}function ge(e,t){return $((function(n,r){var o=null,i=0,c=!1,u=function(){return c&&!o&&r.complete()};n.subscribe(new z(r,(function(n){null==o||o.unsubscribe();var c=0,s=i++;W(e(n,s)).subscribe(o=new z(r,(function(e){return r.next(t?t(n,e,s,c++):e)}),(function(){o=null,u()})))}),(function(){c=!0,u()})))}))}var _e=new H((function(e){return e.complete()}));function Ee(e){return e<=0?function(){return _e}:$((function(t,n){var r=0;t.subscribe(new z(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}let xe=new ae;function Se(e){const t=document.createElement("div");t.className="classDropDown";const n=document.createElement("input");t.appendChild(n),n.className="classSearch",n.placeholder="Pretraga..",Ce(n);const r=document.createElement("div");let o;var i,c,u;r.className="classDropDownContent",(i=n,ce(i,"input").pipe((500,void 0===u&&(u=ye),$((function(e,t){var n=null,r=null,o=null,i=function(){if(n){n.unsubscribe(),n=null;var e=r;r=null,t.next(e)}};function c(){var e=o+500,t=u.now();t<e?n=this.schedule(void 0,e-t):i()}e.subscribe(new z(t,(function(e){r=e,o=u.now(),n||(n=u.schedule(c,500))}),(function(){i(),t.complete()}),void 0,(function(){r=n=null})))}))),D((e=>e.target.value)),(c=e=>e.length>=3,$((function(e,t){var n=0;e.subscribe(new z(t,(function(e){return c.call(undefined,e,n++)&&t.next(e)})))}))),ge((e=>V(fetch(` http://localhost:3000/Knjige/?&q=${e}`).then((e=>{if(e.ok)return console.log(e),e.json();throw new Error("Ne postoje knjige.")})).catch((e=>console.log(e)))))))).subscribe((e=>{r.innerHTML="",e.forEach((e=>{o=document.createElement("a"),function(e,t){const n=document.createElement("div");n.className="classKnjigaCard";const r=document.createElement("img");r.src=t.slika,n.appendChild(r);let o=document.createElement("span");o.className="title",o.innerHTML=`${t.ime}`,n.appendChild(o);const i=document.createElement("p");var c;i.className="classRate",i.innerHTML=`★ ${t.ocena}`,o.appendChild(i),o=document.createElement("span"),o.className="description",o.innerHTML=`${t.opis.substring(0,150)}...`,n.appendChild(o),e.appendChild(n),(c=n,ce(c,"click").pipe(D((e=>e.target)),D((e=>e.parentElement)))).subscribe((e=>{fe&&fe.next(t)}))}(o,e),r.appendChild(o)}))})),t.appendChild(r),e.appendChild(t)}function Ce(e){var t;we(3e3).pipe(D((t=>e.placeholder="")),ge((e=>{return t="Pretraga..",we(100).pipe(Ee(t.length),D((e=>t[e])));var t})),(t=xe,$((function(e,n){W(t).subscribe(new z(n,(function(){return n.complete()}),x)),!n.closed&&e.subscribe(n)})))).subscribe((t=>e.placeholder=e.placeholder+t))}var Ie=Array.isArray;function ke(e){return 1===e.length&&Ie(e[0])?e[0]:e}function Te(e){return s((t=e)[t.length-1])?e.pop():void 0;var t}const je=" http://localhost:3000";function Ae(e,t){const n=document.createElement("div");n.className="classSlideBarElementContainer";const r=document.createElement("img");r.src=t.slika;const o=document.createElement("span");n.appendChild(r),n.appendChild(o);let i=t;i.prezime?o.innerHTML=i.ime+" "+i.prezime:o.innerHTML=t.ime,e.appendChild(n)}var Ne,Pe;!function(){const e=document.createElement("div");e.className="classHeader",document.body.appendChild(e),Se(e)}(),function(){const e=document.createElement("div");e.className="classSlideBar",document.body.appendChild(e),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Te(e),r=ke(e);return r.length?new H((function(e){var t=r.map((function(){return[]})),c=r.map((function(){return!1}));e.add((function(){t=c=null}));for(var u=function(u){W(r[u]).subscribe(new z(e,(function(r){if(t[u].push(r),t.every((function(e){return e.length}))){var s=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,i([],o(s))):s),t.some((function(e,t){return!e.length&&c[t]}))&&e.complete()}}),(function(){c[u]=!0,!t[u].length&&e.complete()})))},s=0;!e.closed&&s<r.length;s++)u(s);return function(){t=c=null}})):_e}(V(fetch(`${je}/Autori/`).then((e=>{if(e.ok)return console.log(e),e.json();throw new Error("Ne postoje autori.")})).catch((e=>console.log(e)))).pipe(ge((e=>V(e)))),V(fetch(`${je}/Knjige/`).then((e=>{if(e.ok)return console.log(e),e.json();throw new Error("Ne postoje knjige.")})).catch((e=>console.log(e)))).pipe(ge((e=>V(e))))).pipe(Ee(3)).subscribe((t=>{Ae(e,t[0]),Ae(e,t[1])}))}(),ce(document,"click").pipe(D((e=>e.target)),D((e=>"classSearch"===e.className)),(void 0===Pe&&(Pe=L),Ne=null!=Ne?Ne:function(e,t){return e===t},$((function(e,t){var n,r=!0;e.subscribe(new z(t,(function(e){var o=Pe(e);!r&&Ne(n,o)||(r=!1,n=o,t.next(e))})))})))).subscribe((e=>function(e){const t=document.querySelector(".classDropDownContent"),n=document.querySelector(".classSearch");e!=t.classList.contains("show")&&t.classList.toggle("show"),1==e?(xe.next("kraj"),xe.complete(),n.placeholder="",console.log("nesto")):(xe=new ae,Ce(n),console.log("pokrenut"))}(e))),function(){fe=new ae;const e=document.createElement("div");e.className="classPreviewBook",document.body.appendChild(e),fe.subscribe((t=>{e.innerHTML="",function(e,t){const n=document.createElement("div");n.className="classKnjiga";const r=document.createElement("div");r.className="top";const o=document.createElement("div");o.className="down",n.appendChild(r),n.appendChild(o);const i=document.createElement("img");i.src=t.slika,r.appendChild(i);const c=document.createElement("div");c.className="topright",r.appendChild(c);let u=document.createElement("span");u.innerHTML=t.ime,u.className="title",c.appendChild(u),u=document.createElement("span"),u.innerHTML=`Opis: <br />${t.opis}`,u.className="description",c.appendChild(u),u=document.createElement("span"),u.innerHTML=`Zanr: <br />${t.zanr.join(", ")}`,u.className="genre",c.appendChild(u),t.autoria=[],function(e){const t=[];return e.forEach((e=>{t.push(async function(e){return fetch(` http://localhost:3000/Autori/${e}`).then((e=>{if(e.ok)return e.json();throw new Error("Ne postoji autor.")}))}(e))})),V(Promise.all(t))}(t.autori).subscribe((e=>{e.forEach((e=>{t.autoria.push(e),function(e,t){const n=document.createElement("div");n.className="classAutor";const r=document.createElement("img");r.src=t.slika,n.appendChild(r);const o=document.createElement("span");o.innerHTML=`Autor: <br />${t.ime} ${t.prezime}`,n.appendChild(o),e.appendChild(n)}(o,e)}))})),e.appendChild(n)}(e,t)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,